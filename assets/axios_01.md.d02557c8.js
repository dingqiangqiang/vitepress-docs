import{_ as a,c as e,o as s,V as l}from"./chunks/framework.85f79a96.js";const m=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"axios/01.md","filePath":"axios/01.md","lastUpdated":1708780763000}'),n={name:"axios/01.md"},i=l(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p><code>Axios</code> 是一个基于 <code>promise</code> 的网络请求库，可以用于浏览器和 node.js。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 <code>XMLHttpRequest</code>。</p><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><ul><li>在浏览器端使用 XMLHttpRequest 对象通讯</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>支持请求和响应的拦截器</li><li>支持请求数据和响应数据的转换</li><li>支持请求的取消</li><li>JSON 数据的自动转换</li><li>客户端防止 XSRF</li></ul><h2 id="源码目录" tabindex="-1">源码目录 <a class="header-anchor" href="#源码目录" aria-label="Permalink to &quot;源码目录&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">注意</p><ul><li>本次分析的版本号为: 0.19.2</li><li>只会分析浏览器端 axios 的实现</li></ul></div><p>Axios.js 的源码都在 lib 目录下，其目录结构如下。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">lib</span></span>
<span class="line"><span style="color:#e1e4e8;">├── adapters        # 请求相关</span></span>
<span class="line"><span style="color:#e1e4e8;">├── core            # 核心代码 </span></span>
<span class="line"><span style="color:#e1e4e8;">├── cancel          # 请求取消</span></span>
<span class="line"><span style="color:#e1e4e8;">├── helpers         # 辅助函数</span></span>
<span class="line"><span style="color:#e1e4e8;">├── axios.js        # 入口</span></span>
<span class="line"><span style="color:#e1e4e8;">├── defaults.js     # 默认配置</span></span>
<span class="line"><span style="color:#e1e4e8;">├── utils.js        # 工具函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="adapters" tabindex="-1">adapters <a class="header-anchor" href="#adapters" aria-label="Permalink to &quot;adapters&quot;">​</a></h3><p>adapters 目录包含不同平台的请求方式，浏览器环境下会引用xhr.js，node 环境会引用http.js。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">adapters</span></span>
<span class="line"><span style="color:#e1e4e8;">├── xhr.js        # 浏览器</span></span>
<span class="line"><span style="color:#e1e4e8;">├── http.js       # node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="core" tabindex="-1">core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;core&quot;">​</a></h3><p>core 目录包含了 Axios.js 的核心代码，包括Axios类、拦截器管理类、配置合并、请求发送核心流程、请求响应数据转换、错误处理等。 这里的代码可谓是 Axios.js 的灵魂，也是我们之后需要重点分析的地方。</p><h3 id="cancel" tabindex="-1">cancel <a class="header-anchor" href="#cancel" aria-label="Permalink to &quot;cancel&quot;">​</a></h3><p>cancel 主要是包含了请求取消的代码。有些场景下，我们希望能主动取消请求，cancel 就是来做这部分工作的。</p><h3 id="helpers" tabindex="-1">helpers <a class="header-anchor" href="#helpers" aria-label="Permalink to &quot;helpers&quot;">​</a></h3><p>helpers 主要定义了一些辅助函数。</p><h3 id="axios" tabindex="-1">axios <a class="header-anchor" href="#axios" aria-label="Permalink to &quot;axios&quot;">​</a></h3><p>入口文件，对外暴露了 axios 及其他好用的 api，如 axios.create、axios.cancelToken、axios.all等。</p><h3 id="defaults" tabindex="-1">defaults <a class="header-anchor" href="#defaults" aria-label="Permalink to &quot;defaults&quot;">​</a></h3><p>axios 的默认配置，定义一些默认的行为。当用户传入配置时，会和默认配置做一层合并。</p><h3 id="utils" tabindex="-1">utils <a class="header-anchor" href="#utils" aria-label="Permalink to &quot;utils&quot;">​</a></h3><p>工具函数</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>从 Axios.js 的目录设计可以看到，功能模块拆分的非常清楚，相关的逻辑放在一个独立的目录下维护，并且把复用的代码也抽成一个独立目录。</p><p>这样的目录设计让代码的阅读性和可维护性都变强，是非常值得学习和推敲的。</p>`,26),o=[i];function r(t,p,c,d,h,u){return s(),e("div",null,o)}const x=a(n,[["render",r]]);export{m as __pageData,x as default};
