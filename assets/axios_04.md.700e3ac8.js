import{_ as s,c as n,o as a,V as p}from"./chunks/framework.85f79a96.js";const u=JSON.parse('{"title":"合并配置的设计与实现","description":"","frontmatter":{},"headers":[],"relativePath":"axios/04.md","filePath":"axios/04.md","lastUpdated":1708780763000}'),l={name:"axios/04.md"},o=p(`<h1 id="合并配置的设计与实现" tabindex="-1">合并配置的设计与实现 <a class="header-anchor" href="#合并配置的设计与实现" aria-label="Permalink to &quot;合并配置的设计与实现&quot;">​</a></h1><p>在上节我们了解到，用户在发送请求的时候可以传入一个配置，来决定请求的不同行为。同时 <code>axios</code> 可以有默认配置，定义一些默认的行为。这样在发送请求时，用户传递的配置可以和默认配置做一层合并。</p><h2 id="默认配置" tabindex="-1">默认配置 <a class="header-anchor" href="#默认配置" aria-label="Permalink to &quot;默认配置&quot;">​</a></h2><p>入口文件在 <code>lib/defaults.js</code>；</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> defaults </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  adapter: </span><span style="color:#B392F0;">getDefaultAdapter</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  transformRequest: [</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transformRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">headers</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">normalizeHeaderName</span><span style="color:#E1E4E8;">(headers, </span><span style="color:#9ECBFF;">&#39;Accept&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">normalizeHeaderName</span><span style="color:#E1E4E8;">(headers, </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setContentTypeIfUnset</span><span style="color:#E1E4E8;">(headers, </span><span style="color:#9ECBFF;">&#39;application/json;charset=utf-8&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  transformResponse: [</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transformResponse</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*eslint no-param-reassign:0*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) { </span><span style="color:#6A737D;">/* Ignore */</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * A timeout in milliseconds to abort a request. If set to 0 (default) a</span></span>
<span class="line"><span style="color:#6A737D;">   * timeout is not created.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  timeout: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  xsrfCookieName: </span><span style="color:#9ECBFF;">&#39;XSRF-TOKEN&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  xsrfHeaderName: </span><span style="color:#9ECBFF;">&#39;X-XSRF-TOKEN&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  maxContentLength: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">validateStatus</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">validateStatus</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">status</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> status </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">defaults.headers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  common: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;Accept&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;application/json, text/plain, */*&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;delete&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;get&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;head&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;options&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">forEachMethodNoData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  defaults.headers[method] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;put&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;patch&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">forEachMethodWithData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  defaults.headers[method] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;application/x-www-form-urlencoded&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>默认配置包含了<code>adapter</code>、自定义请求转换函数、自定义响应转换函数、超时时间、<code>xsrfCookieName</code>、<code>xsrfHeaderName</code>、自定义状态码的校验以及 <code>headers</code> 配置，其中 <code>getDefaultAdapter</code> 会根据当前的执行环境引入不同的请求方式：在浏览器端使用 <code>XMLHttpRequest</code> 对象通讯。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefaultAdapter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> adapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> XMLHttpRequest </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// For browsers use XHR adapter</span></span>
<span class="line"><span style="color:#E1E4E8;">    adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./adapters/xhr&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> process </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(process) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[object process]&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// For node use HTTP adapter</span></span>
<span class="line"><span style="color:#E1E4E8;">    adapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./adapters/http&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> adapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>分析完默认配置后，我们发送请求的时候需要把自定义配置和默认配置做合并，它并不是简单的 2 个普通对象的合并，对于不同的字段合并，会有不同的合并策略。</p><h2 id="mergeconfig" tabindex="-1">mergeConfig <a class="header-anchor" href="#mergeconfig" aria-label="Permalink to &quot;mergeConfig&quot;">​</a></h2><p>入口文件在 <code>lib/core/mergeConfig.js</code>；</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeConfig</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">config1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">config2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  config2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> valueFromConfig2Keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;method&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mergeDeepPropertiesKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;headers&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;auth&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;proxy&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> defaultToConfig2Keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;baseURL&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;transformRequest&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;transformResponse&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;paramsSerializer&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;timeout&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;withCredentials&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;adapter&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;responseType&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;xsrfCookieName&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;xsrfHeaderName&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;onUploadProgress&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;onDownloadProgress&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;maxContentLength&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;validateStatus&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;maxRedirects&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;httpAgent&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;httpsAgent&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;cancelToken&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;socketPath&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(valueFromConfig2Keys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valueFromConfig2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(mergeDeepPropertiesKeys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeDeepProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(config2[prop])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.</span><span style="color:#B392F0;">deepMerge</span><span style="color:#E1E4E8;">(config1[prop], config2[prop]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(config1[prop])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.</span><span style="color:#B392F0;">deepMerge</span><span style="color:#E1E4E8;">(config1[prop]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config1[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config1[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(defaultToConfig2Keys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultToConfig2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config1[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config1[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> axiosKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> valueFromConfig2Keys</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(mergeDeepPropertiesKeys)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(defaultToConfig2Keys);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> otherKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(config2)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterAxiosKeys</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> axiosKeys.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(otherKeys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">otherKeysDefaultToConfig2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config1[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config1[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> config;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p><code>mergeConfig</code> 接收 2 个配置对象，定义了不同合并策略对应的属性集合，针对不同的属性使用不同的合并策略。</p><h3 id="只接受自定义配置合并策略" tabindex="-1">只接受自定义配置合并策略 <a class="header-anchor" href="#只接受自定义配置合并策略" aria-label="Permalink to &quot;只接受自定义配置合并策略&quot;">​</a></h3><p>对于一些属性如 <code>url</code>、<code>method</code>、<code>params</code>、<code>data</code>，合并策略如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> valueFromConfig2Keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;method&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;params&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(valueFromConfig2Keys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valueFromConfig2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>因为对于 <code>url</code>、<code>method</code>、<code>params</code>、<code>data</code> 这些属性，默认配置显然是没有意义的，它们是和每个请求强相关的，所以我们只从自定义配置中获取。</p><h3 id="复杂对象合并策略" tabindex="-1">复杂对象合并策略 <a class="header-anchor" href="#复杂对象合并策略" aria-label="Permalink to &quot;复杂对象合并策略&quot;">​</a></h3><p>对于一些属性如 <code>headers</code>、 <code>auth</code>，合并策略如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> mergeDeepPropertiesKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;headers&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;auth&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;proxy&#39;</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(mergeDeepPropertiesKeys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mergeDeepProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(config2[prop])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.</span><span style="color:#B392F0;">deepMerge</span><span style="color:#E1E4E8;">(config1[prop], config2[prop]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (utils.</span><span style="color:#B392F0;">isObject</span><span style="color:#E1E4E8;">(config1[prop])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> utils.</span><span style="color:#B392F0;">deepMerge</span><span style="color:#E1E4E8;">(config1[prop]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config1[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config1[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>deepMerge 函数的实现过程:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepMerge</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* obj1, obj2, obj3, ... */</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assignValue</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> result[key] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      result[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepMerge</span><span style="color:#E1E4E8;">(result[key], val);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      result[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deepMerge</span><span style="color:#E1E4E8;">({}, val);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      result[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> l; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">[i], assignValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>对于 <code>headers</code>、<code>auth</code> 这类的复杂对象属性，我们需要使用深拷贝的方式，同时也处理了其它一些情况，因为它们也可能是一个非对象的普通值。</p><h3 id="默认合并策略" tabindex="-1">默认合并策略 <a class="header-anchor" href="#默认合并策略" aria-label="Permalink to &quot;默认合并策略&quot;">​</a></h3><p>这是大部分属性的合并策略，如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> defaultToConfig2Keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;baseURL&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;transformRequest&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;transformResponse&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;paramsSerializer&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;timeout&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;withCredentials&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;adapter&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;responseType&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;xsrfCookieName&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;xsrfHeaderName&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;onUploadProgress&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;onDownloadProgress&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;maxContentLength&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;validateStatus&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;maxRedirects&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;httpAgent&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;httpsAgent&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;cancelToken&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;socketPath&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(defaultToConfig2Keys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultToConfig2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config1[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config1[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>它很简单，如果 <code>config2</code> 中有值则返回 <code>config2</code> 中的值，否则返回 <code>config1</code> 中的值。也就是如果自定义配置中定义了某个属性，就采用自定义的，否则就用默认配置。</p><h3 id="非标准属性值的合并策略" tabindex="-1">非标准属性值的合并策略 <a class="header-anchor" href="#非标准属性值的合并策略" aria-label="Permalink to &quot;非标准属性值的合并策略&quot;">​</a></h3><p>用户可能会自定义一些不被包含在以上三种合并策略的属性值，如果存在，会走默认的合并策略。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> axiosKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> valueFromConfig2Keys</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(mergeDeepPropertiesKeys)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(defaultToConfig2Keys);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> otherKeys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(config2)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterAxiosKeys</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> axiosKeys.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(key) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">utils.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(otherKeys, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">otherKeysDefaultToConfig2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">prop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config2[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config2[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> config1[prop] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config[prop] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config1[prop];</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>至此我们合并配置的逻辑就分析完了。纵观一些库、框架的设计几乎都是类似的，自身定义了一些默认配置，同时又可以在初始化阶段传入一些自定义配置，然后去 <code>merge</code> 默认配置，来达到定制化不同需求的目的。在 <code>Vue.js</code> 框架内部也有类似的合并策略<code>mergeOptions</code>。这样的设计思想非常巧秒，非常值得我们借鉴。</p><p>下一节我们会来分析请求发送的核心流程，解析如何做到请求数据和响应数据的转换。</p>`,32),e=[o];function r(E,c,t,y,i,F){return a(),n("div",null,e)}const m=s(l,[["render",r]]);export{u as __pageData,m as default};
