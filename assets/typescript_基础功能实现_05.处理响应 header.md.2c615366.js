import{_ as s,c as a,o as n,V as l}from"./chunks/framework.85f79a96.js";const u=JSON.parse('{"title":"处理响应 header","description":"","frontmatter":{"title":"处理响应 header","date":"2020-01-05T10:56:02.000Z","permalink":"/pages/927161662ca32c24","author":"HuangYi","categories":["《TypeScript 从零实现 axios》","ts-axios 基础功能实现"],"tags":["TypeScript"]},"headers":[],"relativePath":"typescript/基础功能实现/05.处理响应 header.md","filePath":"typescript/基础功能实现/05.处理响应 header.md","lastUpdated":1708867608000}'),e={name:"typescript/基础功能实现/05.处理响应 header.md"},p=l(`<h1 id="处理响应-header" tabindex="-1">处理响应 header <a class="header-anchor" href="#处理响应-header" aria-label="Permalink to &quot;处理响应 header&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>我们通过 <code>XMLHttpRequest</code> 对象的 <code>getAllResponseHeaders</code> 方法获取到的值是如下一段字符串：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">date: Fri, 05 Apr 2019 12:40:49 GMT</span></span>
<span class="line"><span style="color:#e1e4e8;">etag: W/&quot;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">connection: keep-alive</span></span>
<span class="line"><span style="color:#e1e4e8;">x-powered-by: Express</span></span>
<span class="line"><span style="color:#e1e4e8;">content-length: 13</span></span>
<span class="line"><span style="color:#e1e4e8;">content-type: application/json; charset=utf-8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>每一行都是以回车符和换行符 <code>\\r\\n</code> 结束，它们是每个 <code>header</code> 属性的分隔符。对于上面这串字符串，我们希望最终解析成一个对象结构：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">date</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;Fri</span><span style="color:#E1E4E8;">, </span><span style="color:#FDAEB7;font-style:italic;">05</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">Apr</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">2019</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">12</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">40</span><span style="color:#FDAEB7;font-style:italic;">:</span><span style="color:#79B8FF;">49</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">GMT&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">etag:</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">&#39;W/</span><span style="color:#9ECBFF;">&quot;d-Ssxx4FRxEutDLwo2+xkkxKc4y0k&quot;</span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">connection</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;keep-alive&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&#39;x-powered-by&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;Express&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&#39;content-length&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">&#39;</span><span style="color:#79B8FF;">13</span><span style="color:#FDAEB7;font-style:italic;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">&#39;content-type&#39;:</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">&#39;application/json;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">charset=utf</span><span style="color:#79B8FF;">-8</span><span style="color:#FDAEB7;font-style:italic;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="parseheaders-函数实现及应用" tabindex="-1">parseHeaders 函数实现及应用 <a class="header-anchor" href="#parseheaders-函数实现及应用" aria-label="Permalink to &quot;parseHeaders 函数实现及应用&quot;">​</a></h2><p>根据需求分析，我们要实现一个 <code>parseHeaders</code> 工具函数。</p><p><code>helpers/headers.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseHeaders</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">headers</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parsed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">headers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parsed</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  headers.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\r\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">line</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> [key, val] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> line.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;:&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    parsed[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> parsed</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>然后我们使用这个工具函数：</p><p><code>xhr.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">responseHeaders</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseHeaders</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getAllResponseHeaders</span><span style="color:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接着我们再去看刚才的 demo，发现我们已经把响应的 <code>headers</code> 字段从字符串解析成对象结构了。那么接下来，我们在解决之前遗留的第二个问题：对响应 <code>data</code> 字段的处理。</p>`,14),o=[p];function t(r,c,E,i,y,d){return n(),a("div",null,o)}const F=s(e,[["render",t]]);export{u as __pageData,F as default};
