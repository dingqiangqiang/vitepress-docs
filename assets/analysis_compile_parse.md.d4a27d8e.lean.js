import{_ as e,c as o,k as s,a as n,t as a,V as p,o as r}from"./chunks/framework.85f79a96.js";const c="/vitepress-docs/assets/advance-1.f1183226.png",E="/vitepress-docs/assets/advance-2.440a73ed.png",t="/vitepress-docs/assets/stack.fc9ded2c.png",y="/vitepress-docs/assets/parse.164851c7.png",R=JSON.parse('{"title":"parse","description":"","frontmatter":{},"headers":[],"relativePath":"analysis/compile/parse.md","filePath":"analysis/compile/parse.md","lastUpdated":1708780763000}'),i={name:"analysis/compile/parse.md"},F=p("",101),b=s("code",null,"type",-1),m=s("code",null,"type",-1),u=s("code",null,"parseText(text, delimiters)",-1),d=s("code",null,"src/compiler/parser/text-parser.js",-1),B=p("",1),g=s("code",null,"parseText",-1),h=s("code",null,"rawTokens",-1),C=s("code",null,"tokens",-1),f=s("code",null,"_s(${exp})",-1),v=s("code",null,"tokens",-1),T=s("code",null,"{@binding:exp}",-1),x=s("code",null,"rawTokens",-1),k=s("code",null,"tokens",-1),A=s("code",null,`[_s(item),'":"',_s(index)]`,-1),D=s("code",null,"rawTokens",-1),w=s("code",null,"[{'@binding':'item'},':',{'@binding':'index'}]",-1),_=p("",7);function S(l,P,N,j,q,M){return r(),o("div",null,[F,s("p",null,[n("文本构造的 AST 元素有 2 种类型，一种是有表达式的，"),b,n(" 为 2，一种是纯文本，"),m,n(" 为 3。在我们的例子中，文本就是 "),s("code",null,a(l.item)+":"+a(l.index),1),n("，是个表达式，通过执行 "),u,n(" 对文本解析，它的定义在 "),d,n(" 中：")]),B,s("p",null,[g,n(" 首先根据分隔符（默认是 "),s("code",null,a(),1),n("）构造了文本匹配的正则表达式，然后再循环匹配文本，遇到普通文本就 push 到 "),h,n(" 和 "),C,n(" 中，如果是表达式就转换成 "),f,n(" push 到 "),v,n(" 中，以及转换成 "),T,n(" push 到 "),x,n(" 中。")]),s("p",null,[n("对于我们的例子 "),s("code",null,a(l.item)+":"+a(l.index),1),n("，"),k,n(" 就是 "),A,n("；"),D,n(" 就是 "),w,n("。那么返回的对象如下：")]),_])}const O=e(i,[["render",S]]);export{R as __pageData,O as default};
