import{_ as s,c as a,o as n,V as l}from"./chunks/framework.85f79a96.js";const p="/vitepress-docs/assets/string.eb414827.png",e="/vitepress-docs/assets/string2.5266148d.png",o="/vitepress-docs/assets/string3.57201087.png",h=JSON.parse('{"title":"字符串转义","description":"","frontmatter":{},"headers":[],"relativePath":"develop-summary/string.md","filePath":"develop-summary/string.md","lastUpdated":1679054845000}'),r={name:"develop-summary/string.md"},c=l('<h1 id="字符串转义" tabindex="-1">字符串转义 <a class="header-anchor" href="#字符串转义" aria-label="Permalink to &quot;字符串转义&quot;">​</a></h1><h2 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h2><p>在滴滴出行小程序某期英文版需求中，遇到了这样一个问题：</p><p>当后端返回的文案超出一行时，需要以单词作为一个整体进行折行(最多展示两行，超出2行溢出省略)。在调试过程中，发现有几个地名并没有折行。</p><p>展示效果如下图所示： <img src="'+p+'" alt="An image"></p><h2 id="问题定位" tabindex="-1">问题定位 <a class="header-anchor" href="#问题定位" aria-label="Permalink to &quot;问题定位&quot;">​</a></h2><p>由于只有几个地名会出现上述情况，那我们来对比一下不能折行和能折行模板层面的差异，不能折行的单词之间多了 <code>&amp;nbsp;</code> 符号。</p><p><img src="'+e+`" alt="An image"></p><p>我猜想极大概率是后端返回的空格并不是标准空格，导致没有被小程序正确识别(识别成了 <code>&amp;nbsp;</code>)，导致折行样式没有生效。</p><p>那我们再来看一下标准空格和非标准空格对应的 <code>ascii</code> 码(<strong>非标准 160，标准 32</strong>)。</p><div class="tip custom-block"><p class="custom-block-title">String 静态方法</p><ul><li>1、<code>charCodeAt</code>：返回字符串中指定索引处字符对应的 <code>unicode</code> 编码</li><li>2、<code>fromCharCode</code>：将 <code>unicode</code> 编码转为字符</li><li>3、<code>charAt</code>: 返回指定位置的字符</li></ul></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">original</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Beijing West Railway Station North Plaza&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 非标准空格</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">standard</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Beijing West Railway Station North Plaza&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 标准空格</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(original.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 160</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(standard.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="问题解决" tabindex="-1">问题解决 <a class="header-anchor" href="#问题解决" aria-label="Permalink to &quot;问题解决&quot;">​</a></h2><p>既然后端返回的空格为非标准空格，那我们可以在渲染之前做一层转化(统一转化为标准空格)，然后进行渲染。</p><ul><li>1、正则匹配到所有的非标准空格(<code>&amp;nbsp;</code>)</li><li>2、使用标准空格进行替换</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">formatSpace</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">text) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// return text.replace(new RegExp(String.fromCharCode(160), &#39;g&#39;), &#39; &#39;) 使用 replace 处理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">replaceAll</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">fromCharCode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">160</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 使用 replaceAll 处理</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formatStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">formatSpace</span><span style="color:#E1E4E8;">(original)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+o+`" alt="An image"> 至此问题完美解决。</p><h2 id="溢出样式" tabindex="-1">溢出样式 <a class="header-anchor" href="#溢出样式" aria-label="Permalink to &quot;溢出样式&quot;">​</a></h2><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">.content</span><span style="color:#E1E4E8;"> { // 多行文本显示省略号</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">display</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-webkit-box</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-webkit-box-orient</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">vertical</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-webkit-line-clamp</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; // 行数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">overflow</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">hidden</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">300</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.content</span><span style="color:#E1E4E8;"> { // 单行文本显示省略号</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">white-space</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">nowrap</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">overflow</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">hidden</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">text-overflow</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">ellipsis</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">300</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,19),t=[c];function E(i,y,d,b,F,u){return n(),a("div",null,t)}const g=s(r,[["render",E]]);export{h as __pageData,g as default};
