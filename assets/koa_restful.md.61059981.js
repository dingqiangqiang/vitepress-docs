import{_ as s,c as a,o as n,V as l}from"./chunks/framework.85f79a96.js";const b=JSON.parse('{"title":"REST","description":"","frontmatter":{},"headers":[],"relativePath":"koa/restful.md","filePath":"koa/restful.md","lastUpdated":1684327057000}'),p={name:"koa/restful.md"},e=l(`<h1 id="rest" tabindex="-1">REST <a class="header-anchor" href="#rest" aria-label="Permalink to &quot;REST&quot;">​</a></h1><details class="details custom-block"><summary>简介</summary><blockquote><p>万维网软件架构风格，用来创建网络服务(Representational State Transfer)</p></blockquote><p>Representational: 数据的表现形式(JSON、XML...)</p><p>State: 当前状态或者数据</p><p>Transfer: 数据传输</p></details><div class="tip custom-block"><p class="custom-block-title">6个限制</p><ul><li><p>客户-服务器(Client-Server)： 关注点分离，服务端专注数据存储，提升了简单性。前端专注用户界面，提升了可移植性</p></li><li><p>无状态(Stateless)：所有用户会话信息都保存在客户端，每次请求必须包括所有信息，不能依赖上下文信息。服务端不用保存会话信息，提升了简单性、可靠性、可见性</p></li><li><p>缓存(Cache) 所有服务端响应都要被标为可缓存或不可缓存，减少前后端交互，提升了性能。</p></li><li><p><strong>统一接口</strong>(Uniform Interface) 接口设计尽可能统一通用，提升了简单性、可见性。接口与实现解耦，使前后端可以独立开发迭代</p><p>1、资源的标识(每个资源可以通过 URI 被唯一的标识) 2、通过表述来操作资源(客户端不能直接操作服务端资源，应该通过表述(比如JSON)来操作资源) 3、自描述信息(每个请求或响应必须提供足够的信息让接受者理解) 4、超媒体作为应用状态引擎(点击链接跳转到另一个网页)</p></li><li><p>分层系统(Layered System) 每层只知道相邻的一层，后面隐藏的就不知道了。比如客户端不知道是和代理还是真实服务器通信</p></li><li><p>按需代码(Code-On-Demand 可选) 客户端可以下载运行服务端传来的代码，通过减少一些功能，简化了客户端</p></li></ul></div><h2 id="restful" tabindex="-1">RESTful <a class="header-anchor" href="#restful" aria-label="Permalink to &quot;RESTful&quot;">​</a></h2><ul><li><p>组成: 标准的URI，标准HTTP方法、传输的数据媒体类型</p></li><li><p>最佳实践: 增删改查应该返回什么响应?</p><p>增：新增的那一项，删：返回204(没有内容，但是成功了)，改：修改的那一项，查：数组、某一项</p></li></ul><h2 id="参数获取" tabindex="-1">参数获取 <a class="header-anchor" href="#参数获取" aria-label="Permalink to &quot;参数获取&quot;">​</a></h2><p><code>options</code> 方法的作用: 1、检测服务器所支持的请求方法 2、 CORS 中的预检请求</p><ul><li><p>获取 HTTP 请求参数</p><p>获取 query: <code>ctx.query</code></p><p>获取 url: <code>ctx.url</code></p><p>获取路由参数: <code>ctx.params</code></p><p>获取 body: <code>ctx.request.body</code>(npm install koa-bodyparser)</p><p>获取 header: <code>ctx.header</code></p></li><li><p>发送 HTTP 响应</p><p>发送 status: <code>ctx.status = xxx</code></p><p>发送 body: <code>ctx.body = xxx</code></p><p>发送 header: <code>ctx.set(&#39;Allow&#39;, &#39;GET, POST&#39;)</code></p></li></ul><h2 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">koa-router</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Koa</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;koa-router&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Koa</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userRouter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Router</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  prefix: </span><span style="color:#9ECBFF;">&#39;/users&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">userRouter.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;h1&gt;访问了 userRouter&lt;/h1&gt;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(userRouter.</span><span style="color:#B392F0;">routes</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(userRouter.</span><span style="color:#B392F0;">allowedMethods</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3001</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;server is running at 3001 port&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>allowedMethods 作用： 1、响应 options 方法，返回接口所支持的请求方法 2、相应的返回405(不允许)和501(没实现)</p></blockquote>`,12),o=[e];function r(t,c,E,i,y,u){return n(),a("div",null,o)}const F=s(p,[["render",r]]);export{b as __pageData,F as default};
