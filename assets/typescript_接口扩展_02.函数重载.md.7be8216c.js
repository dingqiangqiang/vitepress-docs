import{_ as s,c as n,o as a,V as p}from"./chunks/framework.85f79a96.js";const b=JSON.parse('{"title":"axios 函数重载","description":"","frontmatter":{"title":"axios 函数重载","date":"2020-01-05T10:56:02.000Z","permalink":"/pages/8af227eae851ec97","author":"HuangYi","categories":["《TypeScript 从零实现 axios》","ts-axios 接口扩展"],"tags":["TypeScript"]},"headers":[],"relativePath":"typescript/接口扩展/02.函数重载.md","filePath":"typescript/接口扩展/02.函数重载.md","lastUpdated":1708867608000}'),e={name:"typescript/接口扩展/02.函数重载.md"},l=p(`<h1 id="axios-函数重载" tabindex="-1">axios 函数重载 <a class="header-anchor" href="#axios-函数重载" aria-label="Permalink to &quot;axios 函数重载&quot;">​</a></h1><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>目前我们的 axios 函数只支持传入 1 个参数，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">axios</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  url: </span><span style="color:#9ECBFF;">&#39;/extend/post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg: </span><span style="color:#9ECBFF;">&#39;hi&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们希望该函数也能支持传入 2 个参数，如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">axios</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/extend/post&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>第一个参数是 <code>url</code>，第二个参数是 <code>config</code>，这个函数有点类似 <code>axios.get</code> 方法支持的参数类型，不同的是如果我们想要指定 HTTP 方法类型，仍然需要在 <code>config</code> 传入 <code>method</code>。</p><p>这就用到我们之前所学的函数重载知识点了，接下来我们来实现它。</p><h2 id="重载实现" tabindex="-1">重载实现 <a class="header-anchor" href="#重载实现" aria-label="Permalink to &quot;重载实现&quot;">​</a></h2><p>首先我们要修改 <code>AxiosInstance</code> 的类型定义。</p><p><code>types/index.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AxiosInstance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Axios</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AxiosRequestConfig</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AxiosPromise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">config</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AxiosRequestConfig</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AxiosPromise</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们增加一种函数的定义，它支持 2 个参数，其中 <code>url</code> 是必选参数，<code>config</code> 是可选参数。</p><p>由于 <code>axios</code> 函数实际上指向的是 <code>request</code> 函数，所以我们来修改 <code>request</code> 函数的实现。</p><p><code>core/Axios.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(url: any, config</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> any): AxiosPromise {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> url </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">config) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> url</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatchRequest</span><span style="color:#E1E4E8;">(config)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>我们把 <code>request</code> 函数的参数改成 2 个，<code>url</code> 和 <code>config</code> 都是 <code>any</code> 类型，<code>config</code> 还是可选参数。</p><p>接着在函数体我们判断 <code>url</code> 是否为字符串类型，一旦它为字符串类型，则继续对 <code>config</code> 判断，因为它可能不传，如果为空则构造一个空对象，然后把 <code>url</code> 添加到 <code>config.url</code> 中。如果 <code>url</code> 不是字符串类型，则说明我们传入的就是单个参数，且 <code>url</code> 就是 <code>config</code>，因此把 <code>url</code> 赋值给 <code>config</code>。</p><p>这里要注意的是，我们虽然修改了 <code>request</code> 的实现，支持了 2 种参数，但是我们对外提供的 <code>request</code> 接口仍然不变，可以理解为这仅仅是内部的实现的修改，与对外接口不必一致，只要保留实现兼容接口即可。</p><h2 id="编写-demo" tabindex="-1">编写 demo <a class="header-anchor" href="#编写-demo" aria-label="Permalink to &quot;编写 demo&quot;">​</a></h2><p><code>examples/extend/app.ts</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">axios</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  url: </span><span style="color:#9ECBFF;">&#39;/extend/post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg: </span><span style="color:#9ECBFF;">&#39;hi&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">axios</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/extend/post&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们使用了 <code>axios</code> 2 种请求方式，打开页面运行 <code>demo</code>，通过 network 我们可以看到 2 种请求都是运行正常的。</p><p>至此我们实现了 <code>axios</code> 函数的重载。官方 axios 支持了一种能力，我们可以去定义返回数据的类型，并在请求的时候指定该类型，然后在响应数据中我们就可以获取到该数据类型。下一节课我们就来实现这个 feature。</p>`,24),o=[l];function c(r,t,i,E,d,y){return a(),n("div",null,o)}const m=s(e,[["render",c]]);export{b as __pageData,m as default};
