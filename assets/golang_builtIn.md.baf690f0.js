import{_ as s,c as n,o as a,V as l}from"./chunks/framework.85f79a96.js";const F=JSON.parse('{"title":"内置包","description":"","frontmatter":{},"headers":[],"relativePath":"golang/builtIn.md","filePath":"golang/builtIn.md","lastUpdated":1739242849000}'),p={name:"golang/builtIn.md"},o=l(`<h1 id="内置包" tabindex="-1">内置包 <a class="header-anchor" href="#内置包" aria-label="Permalink to &quot;内置包&quot;">​</a></h1><h2 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-label="Permalink to &quot;json&quot;">​</a></h2><h3 id="结构体-json-marshal" tabindex="-1">结构体 =&gt; json(Marshal) <a class="header-anchor" href="#结构体-json-marshal" aria-label="Permalink to &quot;结构体 =&gt; json(Marshal)&quot;">​</a></h3><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ID     </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student{</span></span>
<span class="line"><span style="color:#E1E4E8;">		ID:     </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">	jsonByte, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">	jsonStr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(jsonByte)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, jsonStr) </span><span style="color:#6A737D;">//{&quot;ID&quot;:12}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="json-结构体-unmarshal" tabindex="-1">json =&gt; 结构体(Unmarshal) <a class="header-anchor" href="#json-结构体-unmarshal" aria-label="Permalink to &quot;json =&gt; 结构体(Unmarshal)&quot;">​</a></h3><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">//json字符串</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`{&quot;ID&quot;:12}\`</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s Student</span></span>
<span class="line"><span style="color:#E1E4E8;">err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Unmarshal</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(str), </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">s)</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> { fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(err) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%#v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, s)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="结构体标签-常用" tabindex="-1">结构体标签(常用) <a class="header-anchor" href="#结构体标签-常用" aria-label="Permalink to &quot;结构体标签(常用)&quot;">​</a></h3><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Id     </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`json:&quot;id&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	Gender </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;gender&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Student{</span></span>
<span class="line"><span style="color:#E1E4E8;">		Id:     </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		Gender: </span><span style="color:#9ECBFF;">&quot;男&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%#v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, s1) </span><span style="color:#6A737D;">//main.Student{Id:12, Gender:&quot;男&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	jsonByte, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">(s1)</span></span>
<span class="line"><span style="color:#E1E4E8;">	jsonStr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(jsonByte)</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, jsonStr) </span><span style="color:#6A737D;">//{&quot;id&quot;:12,&quot;gender&quot;:&quot;男&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,8),e=[o];function r(t,c,E,i,y,u){return a(),n("div",null,e)}const d=s(p,[["render",r]]);export{F as __pageData,d as default};
