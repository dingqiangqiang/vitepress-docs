import{_ as s,c as n,o as a,V as l}from"./chunks/framework.85f79a96.js";const p="/vitepress-docs/assets/rollup.aa698a07.png",e="/vitepress-docs/assets/rollup2.cd32babf.png",o="/vitepress-docs/assets/rollup3.6003069f.png",c="/vitepress-docs/assets/rollup4.b293e771.png",r="/vitepress-docs/assets/rollup5.776dd61d.png",t="/vitepress-docs/assets/rollup6.69b826d5.png",i="/vitepress-docs/assets/rollup7.a7a75b42.png",E="/vitepress-docs/assets/rollup8.28b5b2aa.png",d="/vitepress-docs/assets/rollup9.7e482e20.png",u="/vitepress-docs/assets/rollup10.80f97c73.png",y="/vitepress-docs/assets/rollup11.6f91b6d8.png",_=JSON.parse('{"title":"Rollup","description":"","frontmatter":{},"headers":[],"relativePath":"structure/rollup/index.md","filePath":"structure/rollup/index.md","lastUpdated":1684413339000}'),b={name:"structure/rollup/index.md"},m=l(`<h1 id="rollup" tabindex="-1"><a href="https://cn.rollupjs.org/" target="_blank" rel="noreferrer">Rollup</a> <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;[Rollup](https://cn.rollupjs.org/)&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#简介">简介</a></li><li><a href="#快速上手">快速上手</a></li><li><a href="#配置文件">配置文件</a></li><li><a href="#输出格式">输出格式</a></li><li><a href="#插件机制">插件机制</a><ul><li><a href="#_1、导入-json-文件">1、导入 json 文件</a></li><li><a href="#_2、加载-commonjs-模块">2、加载 CommonJS 模块</a></li><li><a href="#_3、加载-npm-模块">3、加载 npm 模块</a></li></ul></li><li><a href="#代码拆分">代码拆分</a></li><li><a href="#代码拆分输出格式">代码拆分输出格式</a></li><li><a href="#总结">总结</a></li></ul></nav><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><code>rollup</code> 是一个用于 <code>JavaScript</code> 的模块打包工具。它可以将项目中散落的细小模块打包为整块代码，从而使得这些划分的模块可以更好地运行在浏览器环境或 <code>Node.js</code> 环境(<strong>默认只能处理 <code>ESM</code> 模块</strong>)。</p><details class="details custom-block"><summary>rollup vs webpack</summary><p>从作用上来看，<code>rollup</code> 与 <code>webpack</code> 非常类似。不过相比之下，<code>rollup</code> 要小巧的多，<code>webpack</code> 在配合一些插件的使用下，几乎可以完成开发过程中绝大多数前端工程化的工作。而 <code>rollup</code> 可以说仅仅是一个 <code>ES Modules</code> 打包器，没有更多其他的功能了。</p></details><p><strong><code>rollup</code> 诞生的初衷是希望能够提供一个高效的 <code>JavaScript</code> 打包器，充分利用 <code>ES Modules</code> 的各项特性，构建出结构扁平，性能出众的类库</strong>。</p><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><ul><li>安装 <code>rollup</code></li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rollup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装完成后，在 <code>node_modules/.bin</code> 目录中会提供一个 <code>CLI</code> 程序，我们可以通过 <code>CLI</code> 去运行 <code>rollup</code> 打包。具体命令如下：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rollup</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">node版本:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v16.14.2</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>案列结构如下：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">├── src</span></span>
<span class="line"><span style="color:#e1e4e8;">|   ├── index.js  </span></span>
<span class="line"><span style="color:#e1e4e8;">|   ├── logger.js            </span></span>
<span class="line"><span style="color:#e1e4e8;">|   ├── message.js           </span></span>
<span class="line"><span style="color:#e1e4e8;">├── package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>部分代码如下:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// ./src/message.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hi: </span><span style="color:#9ECBFF;">&#39;Hey Guys, I am zce~&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ./src/logger.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;---------- INFO ----------&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;--------------------------&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;---------- ERROR ----------&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;---------------------------&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ./src/index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { log } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./logger&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./message&#39;</span></span>
<span class="line"><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(message.hi)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>运行 <code>rollup</code> 打包</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">npx rollup .</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">src</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.js </span><span style="color:#6A737D;">// 指定打包入口是 src/index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行结果如下图 <img src="`+p+'" alt="An image"></p><ul><li>指定输出文件</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rollup</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./src/index.js</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--file</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./dist/bundle.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+e+`" alt="An image"></p><p>从上述图片可以看出，<code>rollup</code> 打包结果惊人的简洁，基本上就和我们手写的代码一样。相比于 <code>webpack</code> 大量的引导代码和一堆的模块函数，这里的输出结果没有任何多余代码，仅仅把打包过程中的各个模块按照依赖顺序，先后拼接到了一起。</p><p>另外在输出的结果中只会保留那些用到的部分，对于未引用部分不会输出。这是因为 <code>rollup</code> 默认会自动开启 <code>tree-shaking</code> 优化输出结果(<code>tree-shaking</code> 的概念最早由 <code>rollup</code> 提出)</p><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><ul><li>新建 <code>rollup.config.js</code></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">├── src</span></span>
<span class="line"><span style="color:#e1e4e8;">|   ├── index.js  </span></span>
<span class="line"><span style="color:#e1e4e8;">|   ├── logger.js            </span></span>
<span class="line"><span style="color:#e1e4e8;">|   ├── message.js           </span></span>
<span class="line"><span style="color:#e1e4e8;">├── package.json</span></span>
<span class="line"><span style="color:#e1e4e8;">+└── rollup.config.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>配置文件需要导出一个配置对象，通过 <code>input</code> 指定打包的入口文件路径，<code>output</code> 指定输出相关配置，在 <code>output</code> 对象中使用 <code>file</code> 指定输出文件名，<code>format</code> 属性指定输出代码的格式。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>基于 <code>rollup</code> 运行配置文件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">npx rollup </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">config </span><span style="color:#6A737D;">// 使用默认配置文件</span></span>
<span class="line"><span style="color:#E1E4E8;">npx rollup </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">config rollup.prod.js </span><span style="color:#6A737D;">// 指定配置文件路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="输出格式" tabindex="-1">输出格式 <a class="header-anchor" href="#输出格式" aria-label="Permalink to &quot;输出格式&quot;">​</a></h2><p><code>rollup</code> 支持输出多种格式的文件：</p><ul><li><code>es</code> – 将 <code>bundle</code> 保留为 <code>ES</code> 模块，适用于其他打包工具，以及支持 <code>script type=module</code> 标签的浏览器。（别名：<code>esm</code>、<code>module</code>）</li><li><code>amd</code> – 异步模块加载，适用于 <code>requirejs</code> 等模块加载器</li><li><code>cjs</code> – 适用于 <code>Node</code> 环境和其他打包工具（别名：<code>commonjs</code>）</li><li><code>iife</code> – 自执行函数，适用于 <code>script</code> 标签</li><li><code>umd</code> – 通用模块定义规范，同时支持 <code>amd</code>、<code>cjs</code>、<code>iife</code></li><li><code>system</code> – <code>SystemJS</code> 模块加载器的原生格式（别名：<code>systemjs</code>）</li></ul><p>具体配置如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// ./rollup.config.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formats</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;es&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;amd&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;cjs&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;iife&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;system&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> formats.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">format</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">\`dist/bundle.\${</span><span style="color:#E1E4E8;">format</span><span style="color:#9ECBFF;">}.js\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在上述配置中我们导出了一个数组，数组中的每个成员都是一个单独的打包配置，<code>rollup</code> 会按照每个配置单独打包。再次运行 <code>rollup</code> 命令打包，<code>dist</code> 目录下就会生成不同格式的输出结果，如下图所示： <img src="`+o+'" alt="An image"></p><div class="danger custom-block"><p class="custom-block-title">注意</p><p>需要在 <code>package.json</code> 中声明 &quot;type&quot;: &quot;module&quot; 属性，具体报错如下:</p><p><img src="'+c+`" alt="An image"></p></div><h2 id="插件机制" tabindex="-1">插件机制 <a class="header-anchor" href="#插件机制" aria-label="Permalink to &quot;插件机制&quot;">​</a></h2><blockquote><p>由于 <code>rollup</code> 自身的功能就只是 <code>ES Modules</code> 模块的合并，如果有更高级的要求，例如加载其他类型的资源文件或者导入 <code>commonjs</code> 模块，或编译 <code>ES</code> 新特性，这些额外的需求需要借助插件去实现。</p></blockquote><blockquote><p>不同于 <code>webapck</code>，插件是 <code>rollup</code> 唯一的扩展方式。</p></blockquote><h3 id="_1、导入-json-文件" tabindex="-1">1、导入 <code>json</code> 文件 <a class="header-anchor" href="#_1、导入-json-文件" aria-label="Permalink to &quot;1、导入 \`json\` 文件&quot;">​</a></h3><ul><li>安装插件</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@rollup/plugin-json</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>配置插件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-json&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">()</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><details class="details custom-block"><summary><code>@rollup/plugin-json</code> 插件简介</summary><p>该插件默认导出函数。我们可以将该函数的调用结果添加到配置对象的 <code>plugins </code>数组中，注意这里是将调用结果放到数组中，而不是将这个函数直接放进去。</p></details><ul><li>导入 <code>json</code> 文件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// ./src/index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { name, version } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../package.json&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(name, version)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>打包测试</li></ul><p><img src="`+r+`" alt="An image"> 可以看到，<code>package.json</code> 中的 <code>name</code> 和 <code>version</code> 被打包进来了。</p><h3 id="_2、加载-commonjs-模块" tabindex="-1">2、加载 <code>CommonJS</code> 模块 <a class="header-anchor" href="#_2、加载-commonjs-模块" aria-label="Permalink to &quot;2、加载 \`CommonJS\` 模块&quot;">​</a></h3><p>由于 <code>rollup</code> 默认只处理 <code>ES Modules</code> 模块的打包，如果在代码中导入 <code>CommonJS</code> 模块，默认是不被支持的。因此为了兼容 <code>CommonJS</code> 模块。我们可以使用 <code>@rollup/plugin-commonjs</code></p><ul><li>安装插件</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@rollup/plugin-commonjs</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>配置插件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> commonjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-commonjs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">()</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>导入 <code>commonjs</code> 文件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// ./src/cjs-module.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 使用 CommonJS 的方式导出对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> cjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./cjs-module&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 通过 ES Modules 的方式导入并使用模块成员</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(cjs) </span><span style="color:#6A737D;">// cjs =&gt; { foo: &#39;bar&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3、加载-npm-模块" tabindex="-1">3、加载 <code>npm</code> 模块 <a class="header-anchor" href="#_3、加载-npm-模块" aria-label="Permalink to &quot;3、加载 \`npm\` 模块&quot;">​</a></h3><p>由于 <code>rollup</code> 默认只能按照文件路径的方式加载本地的模块文件，对于 <code>node_modules</code> 中的第三方模块，并不能通过模块名称直接导入。</p><ul><li>安装插件</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@rollup/plugin-node-resolve</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>配置插件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> resolve </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-node-resolve&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    file: </span><span style="color:#9ECBFF;">&#39;dist/bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>导入第三方模块</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// ./src/index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { camelCase } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;lodash-es&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">camelCase</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;rollup&#39;</span><span style="color:#E1E4E8;">))  </span><span style="color:#6A737D;">// helloRollup</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p><code>lodash-es</code> 模块属于 <code>lodash</code> 的 <code>ESM</code> 版本，相比于普通的 <code>lodash</code>，<code>lodash-es</code> 可以更好地支持 <code>tree-shaking</code>。</p></blockquote><h2 id="代码拆分" tabindex="-1">代码拆分 <a class="header-anchor" href="#代码拆分" aria-label="Permalink to &quot;代码拆分&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// ./src/index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./logger&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">log</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 动态导入的模块会自动分包</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;code splitting~&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="danger custom-block"><p class="custom-block-title">报错</p><p>由于 <code>rollup</code> 内部也会处理代码拆分。按照之前的配置方式，直接运行打包会报错：</p><p><img src="`+t+`" alt="An image"></p></div><p>由于 <code>rollup</code> 在分包过后会输出多个 <code>js</code> 文件，我们需要在配置中指定输出的目录，而不是一个具体的文件名，修改配置如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// file: &#39;dist/bundle.js&#39;, // code splitting 输出的是多个文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    dir: </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;es&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>再次打包就可以正常输出了。输出结果如下图（<code>rollup</code> 会自动提取动态导入的模块到单独的文件中）</p><p><img src="`+i+'" alt="An image"></p><h2 id="代码拆分输出格式" tabindex="-1">代码拆分输出格式 <a class="header-anchor" href="#代码拆分输出格式" aria-label="Permalink to &quot;代码拆分输出格式&quot;">​</a></h2><p>由于上面采用的输出格式是 <code>es</code>，自动分包过后，得到的代码还是使用 <code>ES Modules</code> 实现的动态模块加载:</p><p><img src="'+E+`" alt="An image"></p><div class="warning custom-block"><p class="custom-block-title">缺陷</p><p>这种方式的代码仍然会存在环境兼容性问题，比如在低版本浏览器，这种输出结果是无法正常执行的。</p></div><p>此时我们可以修改 <code>rollup</code> 打包输出的格式，目前所有支持动态导入的输出格式中，只有 <code>amd</code> 和 <code>system</code> 两种格式打包的结果适合于浏览器环境。</p><p>在这种情况下，我们可以选择以 <code>amd</code> 或者 <code>system</code> 格式输出。以 <code>amd</code> 为例，我们修改配置如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&#39;src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    dir: </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    format: </span><span style="color:#9ECBFF;">&#39;amd&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>再次打包输出的结果就是采用 <code>amd</code> 标准组织的代码了，具体如下：</p><p><img src="`+d+'" alt="An image"></p><p><img src="'+u+`" alt="An image"></p><p>需要注意一点，这种 <code>amd</code> 标准在浏览器中也不是直接支持的，也就是说我们还是需要使用一个支持这个标准的库来加载这些输出的模块，例如 <code>require.js</code>，具体使用方式参考如下代码: 新建 <code>index.html</code></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;AMD Format output&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;https://unpkg.com/requirejs@2.3.6/require.js&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-main</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;../dist/index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="`+y+'" alt="An image"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title"><code>rollup</code> 优势</p><ul><li>输出结果更加扁平，执行效率更高</li><li>自动移除未引用代码</li><li>打包结果依然完全可读</li></ul></div><div class="warning custom-block"><p class="custom-block-title"><code>rollup</code> 缺陷</p><ul><li>加载非 <code>ESM</code> 的第三方模块比较复杂</li><li>因为模块最终都被打包到全局中，所以无法实现 <code>HMR</code></li><li>浏览器环境中，代码拆分功能必须使用 <code>require.js</code> 这样的 <code>AMD</code> 库</li></ul></div><p>综合以上特点，如果我们开发的是一个应用，需要大量引用第三方模块，同时还需要 <code>HMR</code> 提升开发体验，应用过大就必须要分包。上述这些需求 <code>rollup</code> 都无法满足。</p><p>如果开发一个框架或者类库，那这些优点就特别有必要，而缺点呢几乎也都可以忽略，所以在很多像 <code>React</code> 或者 <code>Vue</code> 之类的框架都是使用 <code>rollup</code> 作为模块打包器，而并非 <code>webpack</code>。</p><p>总结一下：<strong>webpack 大而全，rollup 小而美。应用开发使用 webpack，类库或者框架开发使用 rollup</strong>。</p>',93),g=[m];function F(h,v,C,j,B,k){return a(),n("div",null,g)}const x=s(b,[["render",F]]);export{_ as __pageData,x as default};
